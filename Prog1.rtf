{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red52\green52\blue52;}
\margl1440\margr1440\vieww14120\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs30 \cf2 \expnd0\expndtw0\kerning0
*----------------------------------------------------------------------\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* Programmer: Arthur Flores\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* Class Account: masc0200\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* Assignment or Title: Assignment 1\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* Filename: prog1.s\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* Date completed: 10/14/14 \cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
*----------------------------------------------------------------------\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* Problem statement:\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* Input: \cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* Output: \cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* Error conditions tested: \cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* Included files: \cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* Method and/or pseudocode: \cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* References: \cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
*----------------------------------------------------------------------\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
*\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
ORG $0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
DC.L $3000 * Stack pointer value after a reset\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
DC.L start * Program counter value after a reset\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
ORG $3000 * Start at location 3000 Hex\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
*\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
*----------------------------------------------------------------------\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
*\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
#minclude /home/ma/cs237/bsvc/iomacs.s\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
#minclude /home/ma/cs237/bsvc/evtmacs.s\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
*\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
*----------------------------------------------------------------------\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
*\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* Register use\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
*\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
*----------------------------------------------------------------------\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
*\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
start: initIO 				* Initialize (required for I/O)\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
setEVT 						* Error handling routines\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* initF 					* For floating point macros only \cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
lineout 	title 			*prints title\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
lineout 	prompt1 		*prints user to enter integer\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
linein 		buffer 			*read user input\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
cvta2 		buffer,D0 		*converts input to 2's complement \cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
mulu 		#12,D0 			*multiplies user input by 12\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
lea 		array,A1 		*load effective address array in A1\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
adda.l 		D0,A1 			*adds user input times 12 to arrays address \cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
move.l 		(A1),number 	*moves contents of A1 into number\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
adda.l 		#4,A1 			*adds 4 so more word can be read\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
move.l 		(A1),number+4 	*place contents of A1 into num plus 4\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
adda.l 		#4,A1 			*add 4 to A1 to get last piece 4 charc of word\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
move.l 		(A1),number+8 	*place contents of A1 in num plus 8\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
lineout 	answer 			*print english word of int on screen\cf0 \expnd0\expndtw0\kerning0
\
\
\
\
\cf2 \expnd0\expndtw0\kerning0
break 				* Terminate execution\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
*\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
*----------------------------------------------------------------------\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
* Storage declarations\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
title: 		dc.b 		'Program #1, Arthur Flores, masc0200',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
prompt1: 	dc.b 		'Enter an integer in the range 0 .. 20:',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
buffer: 	ds.b 		81\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
array: 		dc.b 		'zero. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'one. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'two. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'three. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'four. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'five. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'six. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'seven. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'eight. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'nine. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'ten. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'eleven. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'twelve. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'thirteen. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'fourteen. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'fifteen. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'sixteen. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'seventeen. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'eighteen. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		'nineteen. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b		\'91twenty. ',0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
			dc.b 		0\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
answer: 	dc.b 		'The number you entered was '\cf0 \expnd0\expndtw0\kerning0
\
\cf2 \expnd0\expndtw0\kerning0
number: 	ds.b 		12\cf0 \expnd0\expndtw0\kerning0
\
\
\
\cf2 \expnd0\expndtw0\kerning0
end}